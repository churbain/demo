# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  validation:
    runs-on: ubuntu-latest
    outputs:
      NEW_VERSION: ${{ steps.CalculNewversion.outputs.NEW_VERSION }}
      OLD_NO_SNAP: ${{ steps.CalculNewversion.outputs.OLD_NO_SNAP }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - id: getOld
      run: echo "OLD_VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
    - id: diplay
      run : echo "${{ env.OLD_VERSION }}"
    - id: CalculNewversion
      run: |
       import os
       import re
       old = "${{ env.OLD_VERSION }}"
       vals = re.split('[.-]+', old )
       if int(vals[1]) <99:
        majeur =  vals[0]
        mineur = str(int (vals[1]) + 1)
       else:
        majeur = str (int(vals[0]) +1)
        mineur = 0
       new_vers = majeur + "." + mineur
       with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
        print(f'NEW_VERSION={new_vers}', file=fh)
        print(f'OLD_NO_SNAP={int(vals[0])}.{int(vals[1])}', file=fh)
      shell: python
    - name: diplay
      run : |
       echo "${{ env.NEW_VERSION }}"
       echo "${{ env.OLD_NO_SNAP }}"
  start:
   runs-on: ubuntu-latest
   needs: validation
   steps:
    - uses: actions/checkout@v3
    - env:
       NEW_VERSION: ${{needs.validation.outputs.NEW_VERSION}}
       OLD_NO_SNAP: ${{needs.validation.outputs.OLD_NO_SNAP}}
      run: mvn versions:set -DnewVersion=${{env.NEW_VERSION}}
    - run: git add --all
    - run: git commit -m "version update"
    - run: git push


